package com.vnnovate.greendao.Entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Division = new Property(2, String.class, "division", false, "DIVISION");
        public final static Property Standard = new Property(3, int.class, "standard", false, "STANDARD");
        public final static Property Fathername = new Property(4, String.class, "fathername", false, "FATHERNAME");
        public final static Property Mothername = new Property(5, String.class, "mothername", false, "MOTHERNAME");
        public final static Property Contactnumber = new Property(6, String.class, "contactnumber", false, "CONTACTNUMBER");
    }


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"NAME\" TEXT," + // 1: name
                "\"DIVISION\" TEXT," + // 2: division
                "\"STANDARD\" INTEGER NOT NULL ," + // 3: standard
                "\"FATHERNAME\" TEXT," + // 4: fathername
                "\"MOTHERNAME\" TEXT," + // 5: mothername
                "\"CONTACTNUMBER\" TEXT);"); // 6: contactnumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String division = entity.getDivision();
        if (division != null) {
            stmt.bindString(3, division);
        }
        stmt.bindLong(4, entity.getStandard());
 
        String fathername = entity.getFathername();
        if (fathername != null) {
            stmt.bindString(5, fathername);
        }
 
        String mothername = entity.getMothername();
        if (mothername != null) {
            stmt.bindString(6, mothername);
        }
 
        String contactnumber = entity.getContactnumber();
        if (contactnumber != null) {
            stmt.bindString(7, contactnumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String division = entity.getDivision();
        if (division != null) {
            stmt.bindString(3, division);
        }
        stmt.bindLong(4, entity.getStandard());
 
        String fathername = entity.getFathername();
        if (fathername != null) {
            stmt.bindString(5, fathername);
        }
 
        String mothername = entity.getMothername();
        if (mothername != null) {
            stmt.bindString(6, mothername);
        }
 
        String contactnumber = entity.getContactnumber();
        if (contactnumber != null) {
            stmt.bindString(7, contactnumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // division
            cursor.getInt(offset + 3), // standard
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fathername
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mothername
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // contactnumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDivision(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStandard(cursor.getInt(offset + 3));
        entity.setFathername(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMothername(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContactnumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Student entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
